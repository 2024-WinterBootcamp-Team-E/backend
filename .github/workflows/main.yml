name: CI/CD

on:
  push:
    branches: [ "main" ]  # main 브랜치에 Push될 때 실행

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - uses: actions/checkout@v3

      # 2. Git SHA로 태그 생성
      - name: Generate Tag
        id: tag
        run: |
          TAG=v-$(echo "${{ github.sha }}" | head -c 8)  # Git SHA 기반 태그 생성
          echo "TAG=${TAG}" >> $GITHUB_ENV  # GitHub Actions 환경변수로 설정

      # 3. PR 번호 추출 (github.event.pull_request.number 사용)
      - name: Show pull request number
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          echo "PR Number: ${{ github.event.pull_request.number }}"

      - name: Set Docker Image Tag based on PR Number and Run Number
        id: set_docker_image_tag
        run: |
          if [ "${{ github.ref_name }}" == "main" ]; then
            DOCKER_IMAGE_TAG="1.1.${{ github.event.pull_request.number }}"
          else
            DOCKER_IMAGE_TAG="0.${{ github.event.pull_request.number }}.${{ github.run_number }}"
          fi
          echo "Docker Image Tag: $DOCKER_IMAGE_TAG"
          echo "DOCKER_IMAGE_TAG=${DOCKER_IMAGE_TAG}" >> $GITHUB_ENV

      # 4. Python 설치 및 의존성 설치
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 5. Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 6. Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        env:
          DOCKER_IMAGE_TAG: ${{ steps.set_docker_image_tag.outputs.DOCKER_IMAGE_TAG }}
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/fastapi-app:$DOCKER_IMAGE_TAG .
          docker push ${{ secrets.DOCKER_USERNAME }}/fastapi-app:$DOCKER_IMAGE_TAG

      # 7. 원격 서버에 배포
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/fastapi-app
            TAG=${{ env.DOCKER_IMAGE_TAG }}
            
            echo "Deploying Docker image: $IMAGE_NAME:$TAG"
            
            # 기존 컨테이너 중지 및 제거
            docker pull $IMAGE_NAME:$TAG
            docker stop fastapi || true
            docker rm fastapi || true
            
            # 새 컨테이너 실행
            docker run -d --name fastapi -p 8000:8000 $IMAGE_NAME:$TAG

